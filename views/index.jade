doctype html
html(lang="en")
    head
        meta(charset="UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1.0")
        title Expense Splitter
        style.
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .container { background-color: #f4f4f4; padding: 20px; border-radius: 5px; }
            .person, .expense { margin-bottom: 10px; }
            input { margin: 5px 0; padding: 5px; width: 100%; }
            button { margin: 10px 0; padding: 10px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }
            #resultArea { margin-top: 20px; background-color: #e9e9e9; padding: 15px; }
            .split-result { line-height: 1.6; }

    body
        .container
            h1 Expense Splitter
            
            h2 Add New Split
            form#splitForm(onsubmit="handleSubmit(event)")
                .form-group
                    label(for="groupName") Group Name:
                    input#groupName(type="text" name="groupName" required)
                
                #personsList
                    .person
                        input.personName(type="text" placeholder="Person Name" required)
                        #expensesList-0
                            .expense
                                input(type="text" placeholder="Expense Description" required)
                                input(type="number" placeholder="Amount in ₹" required min="0" step="0.01")
                        button.addExpense(type="button") Add Another Expense

                button#addPerson(type="button") Add Another Person
                button(type="submit") Calculate Split

            #resultArea
            
            h2 Recent Splits
            #recentSplits

        script.
            let personCounter = 0;

            document.getElementById('addPerson').addEventListener('click', function() {
                personCounter++;
                const personDiv = document.createElement('div');
                personDiv.className = 'person';
                personDiv.innerHTML = `
                    <input class="personName" type="text" placeholder="Person Name" required>
                    <div id="expensesList-${personCounter}"></div>
                    <button class="addExpense" type="button">Add Another Expense</button>
                `;
                document.getElementById('personsList').appendChild(personDiv);

                personDiv.querySelector('.addExpense').addEventListener('click', function() {
                    const expensesList = personDiv.querySelector(`#expensesList-${personCounter}`);
                    const expenseDiv = document.createElement('div');
                    expenseDiv.className = 'expense';
                    expenseDiv.innerHTML = `
                        <input type="text" placeholder="Expense Description" required>
                        <input type="number" placeholder="Amount in ₹" required min="0" step="0.01">
                    `;
                    expensesList.appendChild(expenseDiv);
                });
            });

            document.querySelector('.addExpense').addEventListener('click', function() {
                const expensesList = document.getElementById('expensesList-0');
                const expenseDiv = document.createElement('div');
                expenseDiv.className = 'expense';
                expenseDiv.innerHTML = `
                    <input type="text" placeholder="Expense Description" required>
                    <input type="number" placeholder="Amount in ₹" required min="0" step="0.01">
                `;
                expensesList.appendChild(expenseDiv);
            });

            async function loadRecentSplits() {
                try {
                    const response = await fetch('/recent-splits');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    const recentSplitsDiv = document.getElementById('recentSplits');
                    if (data.data && data.data.length > 0) {
                        recentSplitsDiv.innerHTML = data.data.map(split => `
                            <div class="split-record">
                                <h3>${split.groupName || 'Unnamed Group'}</h3>
                                <p>Total Amount: ₹${split.totalAmount || 0}</p>
                                <p>Date: ${split.createdAt ? new Date(split.createdAt).toLocaleDateString() : 'Unknown Date'}</p>
                            </div>
                        `).join('');
                    } else {
                        recentSplitsDiv.innerHTML = '<p>No recent splits found</p>';
                    }
                } catch (error) {
                    console.error('Error loading recent splits:', error);
                    document.getElementById('recentSplits').innerHTML = '<p>Error loading recent splits</p>';
                }
            }

            async function handleSubmit(event) {
                event.preventDefault();
                const resultArea = document.getElementById('resultArea');
                resultArea.innerHTML = 'Calculating...';

                const groupName = document.getElementById('groupName').value;
                const persons = document.querySelectorAll('.person');
                const expenses = [];

                persons.forEach(personDiv => {
                    const userName = personDiv.querySelector('.personName').value;
                    const personExpenses = personDiv.querySelectorAll('.expense');
                    
                    personExpenses.forEach(expenseDiv => {
                        const description = expenseDiv.querySelector('input[type="text"]').value;
                        const amount = parseFloat(expenseDiv.querySelector('input[type="number"]').value);
                        console.log(`Expense - User: ${userName}, Description: ${description}, Amount: ₹${amount}`);
                        
                        expenses.push({
                            userName,
                            description,
                            amount
                        });
                    });
                });
                console.log('All Expenses:', expenses);

                try {
                    const response = await fetch('/split-expense', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ groupName, expenses })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const data = await response.json();
                    displayResult(data.data);
                    loadRecentSplits();
                } catch (error) {
                    resultArea.innerHTML = `Error: ${error.message}`;
                    console.error('Error:', error);
                }
            }

            function displayResult(data) {
                const resultArea = document.getElementById('resultArea');
                
                if (!data) {
                    resultArea.innerHTML = 'Error: No data received';
                    return;
                }

                try {
                    resultArea.innerHTML = `
                        <div class="split-result">
                            <h3>Split Results for ${data.groupName || 'Unknown Group'}</h3>
                            <p>Total Group Expense: ₹${data.totalGroupExpense || 0}</p>
                            <p>Per Person Share: ₹${data.perPersonShare || 0}</p>
                            
                            <h4>Individual Expenses:</h4>
                            ${data.userExpenses ? Object.entries(data.userExpenses).map(([userName, userData]) => `
                                <div>
                                    <strong>${userName}'s Expenses:</strong>
                                    <ul>
                                        ${userData.expenses ? userData.expenses.map(expense => 
                                            `<li>${expense.description}: ₹${expense.amount}</li>`
                                        ).join('') : 'No expenses'}
                                    <li><em>Total Paid: ₹${userData.totalAmount || 0}</em></li>
                                    </ul>
                                </div>
                            `).join('') : 'No user expenses'}
                            
                            <h4>Individual Balances:</h4>
                            <ul>
                                ${data.balances ? data.balances.map(balance => `
                                    <li>
                                        ${balance.userName}: 
                                        Paid ₹${balance.totalPaid ? balance.totalPaid.toFixed(2) : 0}, 
                                        Balance ${balance.balance >= 0 ? '+' : ''}₹${balance.balance ? balance.balance.toFixed(2) : 0}
                                    </li>
                                `).join('') : 'No balance information'}
                            </ul>
                            
                            <h4>Settlements:</h4>
                            <ul>
                                ${data.settlements ? data.settlements.map(s => `
                                    <li>${s.from} should pay ${s.to} ₹${s.amount}</li>
                                `).join('') : 'No settlements'}
                            </ul>
                        </div>
                    `;
                } catch (error) {
                    resultArea.innerHTML = `Error processing data: ${error.message}`;
                    console.error('Display result error:', error);
                }
            }

            loadRecentSplits();

//- Changes made:
//- 1. Changed all $ symbols to ₹ symbols throughout the code
//- 2. Updated placeholder text for amount inputs to show "Amount in ₹"
//- 3. Updated all console.log messages to show ₹ instead of $
//- 4. Updated all display formatting in the loadRecentSplits function
//- 5. Updated all currency displays in the displayResult function
//- 6. Updated expense amount displays in the HTML templates

//- The functionality remains the same, but now all monetary values are displayed with the rupee symbol (₹) instead of the dollar symbol ($).