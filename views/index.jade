extends layout

block content
  h1= title
  
  .container
    h2 Add New Split
    form#splitForm(onsubmit="handleSubmit(event)")
      .form-group
        label(for="groupName") Group Name:
        input#groupName(type="text" name="groupName" required)
      
      #expensesList
        .expense
          input(type="text" placeholder="Person Name" required)
          input(type="number" placeholder="Amount" required min="0" step="0.01")
      
      button#addPerson(type="button") Add Another Person
      button(type="submit") Calculate Split

    #resultArea
    h2 Recent Splits
    #recentSplits

  script.
    // Add person button handler
    document.getElementById('addPerson').addEventListener('click', function() {
      const expenseDiv = document.createElement('div');
      expenseDiv.className = 'expense';
      expenseDiv.innerHTML = `
        <input type="text" placeholder="Person Name" required>
        <input type="number" placeholder="Amount" required min="0" step="0.01">
      `;
      document.getElementById('expensesList').appendChild(expenseDiv);
    });

    // Form submission handler
    async function handleSubmit(event) {
      event.preventDefault();
      const resultArea = document.getElementById('resultArea');
      resultArea.innerHTML = 'Calculating...';
      
      const groupName = document.getElementById('groupName').value;
      const expenseDivs = document.querySelectorAll('.expense');
      const expenses = Array.from(expenseDivs).map(div => ({
        userName: div.querySelector('input[type="text"]').value,
        amount: parseFloat(div.querySelector('input[type="number"]').value)
      }));

      try {
        const response = await fetch('/split-expense', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ groupName, expenses })
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        displayResult(data.data);
      } catch (error) {
        resultArea.innerHTML = `Error: ${error.message}`;
        console.error('Error:', error);
      }
    }

    function displayResult(data) {
      const resultArea = document.getElementById('resultArea');
      resultArea.innerHTML = `
        <div class="split-result">
          <h3>Split Results for ${data.groupName}</h3>
          <p>Total Amount: $${data.totalAmount}</p>
          <p>Per Person Share: $${data.perPersonShare}</p>
          <h4>Settlements:</h4>
          <ul>
            ${data.settlements.map(s => `
              <li>${s.from} should pay ${s.to} $${s.amount}</li>
            `).join('')}
          </ul>
        </div>
      `;
    }

    // Load recent splits
    async function loadRecentSplits() {
      try {
        const response = await fetch('/recent-splits');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        const recentSplitsDiv = document.getElementById('recentSplits');
        if (data.data && data.data.length > 0) {
          recentSplitsDiv.innerHTML = data.data.map(split => `
            <div class="split-record">
              <h3>${split.groupName}</h3>
              <p>Total Amount: $${split.totalAmount}</p>
              <p>Date: ${new Date(split.createdAt).toLocaleDateString()}</p>
            </div>
          `).join('');
        } else {
          recentSplitsDiv.innerHTML = '<p>No recent splits found</p>';
        }
      } catch (error) {
        console.error('Error loading recent splits:', error);
        document.getElementById('recentSplits').innerHTML = '<p>Error loading recent splits</p>';
      }
    }

    // Load recent splits when page loads
    loadRecentSplits();